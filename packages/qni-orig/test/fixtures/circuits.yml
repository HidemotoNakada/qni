# Read about fixtures at https://api.rubyonrails.org/classes/ActiveRecord/FixtureSet.html

random_bit:
  name: Random bit
  json: '{"cols":[["H"],["Measure"]]}'

random_byte:
  name: Random byte
  json: '{"cols":[["H","H","H","H","H","H","H","H"],["Measure","Measure","Measure","Measure","Measure","Measure","Measure","Measure"]]}'

root_of_not:
  name: Root-of-not
  json: '{"cols":[["{RNOT"],["H"],["P(-Â½)"],["H"],["}"],["{RNOT"],["H"],["P(-Â½)"],["H"],["}"],["{Built-in RNOT"],["X^Â½"],["X^Â½"],["}"]]}'

quantum_spy_hunter:
  name: Quantum Spy Hunter
  json: '{"cols":[["{get two random bits"],["|0>"],["H"],["Measure>alice_h"],["|0>"],["H"],["Measure>alice_v"],["}"],["|0>"],["{set value"],["X<alice_v"],["}"],["{apply H"],["H<alice_h"],["}"],["Swap","Swap"],["{ðŸ•¶spy"],[1,"H"],[1,"Measure>eve_v"],[1,"|0>"],[1,"X<eve_v"],[1,"H"],["}"],[1,1,"|0>"],[1,1,"H"],[1,1,"Measure>bob_h"],[1,"Swap","Swap"],["{apply H"],[1,1,"H<bob_h"],["}"],["{readout"],[1,1,"Measure"],["}"]],"init":false}'

separable_qubits:
  name: Separable qubits
  json: '{"cols":[[1,"H"],[1,1,"H"]]}'

entangled_qubits:
  name: Entangled qubits
  json: '{"cols":[["{entangle"],["|0>","|0>"],["H"],["â€¢","X"],["}"],["Measure"],[1,"Measure"]],"init":false}'

phase_kickback:
  name: Phase kickback
  json: '{"cols":[["|0>","|0>"],[1,1,"|1>"],["H","H",1],["P(Ï€_4)",1,"P(Ï€_4)"],[1,"P(Ï€_2)","P(Ï€_2)"]],"init":false}'

swap_test:
  name: Swap test
  json: '{"cols":[["{initialize"],["|0>",1,1],[1,"|0>",1],["}"],["{swap test"],[1,1,"|0>"],[1,1,"H"],["Swap","Swap","â€¢"],[1,1,"H"],[1,1,"X"],[1,1,"Measure"],["}"]],"init":false}'

custom_conditional_phase:
  name: Custom conditional-phase
  json: '{"cols":[["|0>","|0>"],["H","H"],[1,"P(Ï€_4)"],["â€¢","X"],[1,"P(-Ï€_4)"],["â€¢","X"],["P(Ï€_4)",1],["P(Ï€_2)","P(Ï€_2)"]],"init":false}'

remote_controlled_randomness:
  name: Remote-controlled randomness
  json: '{"cols":[["|0>","|0>"],["H",1],[1,"H"],[1,"P(Ï€_4)"],[1,"H"],["â€¢","X"],["Measure",1],[1,"Measure"]],"init":false}'

basic_teleportation:
  name: Basic teleportation
  json: '{"cols":[[1,"|0>","|0>"],["{entangle"],[1,"H",1],[1,"â€¢","X"],["}"],["|0>",1,1],["{prep payload"],["Rx(11Ï€_8)",1,1],["Bloch",1,1],["}"],[1,1,1],["{send"],["â€¢","X",1],["H",1,1],["Measure",1,1],[1,"Measure",1],["}"],[1,1,1],["{receive"],[1,"â€¢","X"],["â€¢",1,"â€¢"],["}"],[1,1,1],["{verify"],[1,1,"Bloch"],[1,1,"Measure"],["}"],[1,1,1]],"init":false}'

increment_and_decrement:
  name: Increment and decrement
  json: '{"cols":[["{prepare"],["|1>","|0>","|0>","|0>"],[1,1,"H",1],[1,1,"P(Ï€_4)",1],["}"],["{increment"],["â€¢","â€¢","â€¢","X"],["â€¢","â€¢","X",1],["â€¢","X",1,1],["X",1,1,1],["}"],["{decrement"],["X",1,1,1],["â€¢","X",1,1],["â€¢","â€¢","X",1],["â€¢","â€¢","â€¢","X"],["}"]],"init":false}'

adding_two_quantum_integers:
  name: Adding two quantum integers
  json: '{"cols":[["{prepare"],["|1>","|0>","|0>","|0>",1,1],[1,1,"H",1,1,1],[1,1,"P(Ï€_4)",1,1,1],[1,1,1,1,"|1>","|0>"],[1,1,1,1,1,"H"],[1,1,1,1,1,"P(Ï€_2)"],["}"],["{a += b"],["â€¢","â€¢","â€¢","X","â€¢",1],["â€¢","â€¢","X",1,"â€¢",1],["â€¢","X",1,1,"â€¢",1],["X",1,1,1,"â€¢",1],[1,"â€¢","â€¢","X",1,"â€¢"],[1,"â€¢","X",1,1,"â€¢"],[1,"X",1,1,1,"â€¢"],["}"]],"init":false}'

add_squared:
  name: Add-squared
  json: '{"cols":[["{prepare"],["|1>","|0>","|0>","|0>",1,1],[1,1,"H",1,1,1],[1,1,"P(Ï€_4)",1,1,1],[1,1,1,1,"|1>","|0>"],[1,1,1,1,1,"H"],[1,1,1,1,1,"P(Ï€_2)"],["}"],["{a *= b"],["â€¢","â€¢","â€¢","X","â€¢",1],["â€¢","â€¢","X",1,"â€¢",1],["â€¢","X",1,1,"â€¢",1],["X",1,1,1,"â€¢",1],[1,"â€¢","â€¢","X",1,"â€¢"],[1,"â€¢","X",1,1,"â€¢"],[1,"X",1,1,1,"â€¢"],[1,"â€¢","â€¢","X",1,"â€¢"],[1,"â€¢","X",1,1,"â€¢"],[1,"X",1,1,1,"â€¢"],[1,1,"â€¢","X",1,"â€¢"],[1,1,"X",1,1,"â€¢"],["}"]],"init":false}'

quantum_conditional_execution:
  name: Quantum conditional execution
  json: '{"cols":[["{a=(1,5)"],["|1>","|0>","|0>",1,1,1],[1,1,"H",1,1,1],["}"],["{b=(1,3)"],[1,1,1,"|1>","|0>","|0>"],[1,1,1,1,"H",1],[1,1,1,1,"P(Ï€_4)",1],["}"],["{a-=3"],[1,"X",1,1,1,1],[1,"â€¢","X",1,1,1],["X",1,1,1,1,1],["â€¢","X",1,1,1,1],["â€¢","â€¢","X",1,1,1],["}"],["{if (a<0) then b++"],[1,1,"â€¢","â€¢","â€¢","X"],[1,1,"â€¢","â€¢","X",1],[1,1,"â€¢","X",1,1],["}"],["{a+=3"],["â€¢","â€¢","X",1,1,1],["â€¢","X",1,1,1,1],["X",1,1,1,1,1],[1,"â€¢","X",1,1,1],[1,"X",1,1,1,1],["}"]],"init":false}'

quantum_conditional_phase_flip:
  name: Quantum conditional phase flip
  json: '{"cols":[["{a=0,1,2,3"],["|0>","|0>","|0>",1,1],["H","H",1,1,1],["}"],["{b=1,3"],[1,1,1,"|1>","|0>"],[1,1,1,1,"H"],["}"],["{a-=3"],[1,"X",1,1,1],[1,"â€¢","X",1,1],["X",1,1,1,1],["â€¢","X",1,1,1],["â€¢","â€¢","X",1,1],["}"],["{flip if (a<0 && b==1)"],[1,1,1,1,"X"],[1,1,"â€¢","â€¢","â€¢"],[1,1,1,1,"X"],["}"],["{a+=3"],["â€¢","â€¢","X",1,1],["â€¢","X",1,1,1],["X",1,1,1,1],[1,"â€¢","X",1,1],[1,"X",1,1,1],["}"]],"init":false}'

cnot_logic:
  name: CNOT logic
  json: '{"cols":[[1,1,"|0>"],[1,1,"X"],[1,1,"Measure"],[1,"|1>",1],[1,1,"|0>"],[1,"â€¢","X"],[1,"Measure",1],[1,1,"Measure"],["|1>","|1>","|0>"],["â€¢","â€¢","X"],["Measure","Measure","Measure"]],"init":false}'

apply_mirror_to_flipped_phase:
  name: Apply mirror to flipped phase
  json: '{"cols":[["|0>","|0>","|0>","|0>"],["H","H","H","H"],[1,1,"X","X"],["â€¢","â€¢","â€¢","â€¢"],[1,1,"X","X"],["H","H","H","H"],["X","X","X","X"],["â€¢","â€¢","â€¢","â€¢"],["X","X","X","X"],["H","H","H","H"],[1,1,"X","X"],["â€¢","â€¢","â€¢","â€¢"],[1,1,"X","X"],["H","H","H","H"],["X","X","X","X"],["â€¢","â€¢","â€¢","â€¢"],["X","X","X","X"],["H","H","H","H"],[1,1,"X","X"],["â€¢","â€¢","â€¢","â€¢"],[1,1,"X","X"],["H","H","H","H"],["X","X","X","X"],["â€¢","â€¢","â€¢","â€¢"],["X","X","X","X"],["H","H","H","H"],[1,1,"X","X"],["â€¢","â€¢","â€¢","â€¢"],[1,1,"X","X"],["H","H","H","H"],["X","X","X","X"],["â€¢","â€¢","â€¢","â€¢"],["X","X","X","X"],["H","H","H","H"]],"init":false}'

repeated_iterations:
  name: Repeated iterations
  json: '{"cols":[["{prep"],["|0>","|0>","|0>","|0>"],["H","H","H","H"],["}"],["{Amplitude Amplification"],[1,1,"X","X"],["â€¢","â€¢","â€¢","â€¢"],[1,1,"X","X"],["H","H","H","H"],["X","X","X","X"],["â€¢","â€¢","â€¢","â€¢"],["X","X","X","X"],["H","H","H","H"],["}"],["{Amplitude Amplification"],[1,1,"X","X"],["â€¢","â€¢","â€¢","â€¢"],[1,1,"X","X"],["H","H","H","H"],["X","X","X","X"],["â€¢","â€¢","â€¢","â€¢"],["X","X","X","X"],["H","H","H","H"],["}"],["{Amplitude Amplification"],[1,1,"X","X"],["â€¢","â€¢","â€¢","â€¢"],[1,1,"X","X"],["H","H","H","H"],["X","X","X","X"],["â€¢","â€¢","â€¢","â€¢"],["X","X","X","X"],["H","H","H","H"],["}"],["{Amplitude Amplification"],[1,1,"X","X"],["â€¢","â€¢","â€¢","â€¢"],[1,1,"X","X"],["H","H","H","H"],["X","X","X","X"],["â€¢","â€¢","â€¢","â€¢"],["X","X","X","X"],["H","H","H","H"],["}"]],"init":false}'

multiple_flipped_entries:
  name: Multiple flipped entries
  json: '{"cols":[["|0>","|0>","|0>","|0>"],["H","H","H","H"],["X","X","X","X"],["â€¢","â€¢","â€¢","â€¢"],["X","X","X","X"],[1,"X","X","X"],["â€¢","â€¢","â€¢","â€¢"],[1,"X","X","X"],["X",1,"X","X"],["â€¢","â€¢","â€¢","â€¢"],["X",1,"X","X"],["H","H","H","H"],["X","X","X","X"],["â€¢","â€¢","â€¢","â€¢"],["X","X","X","X"],["H","H","H","H"],["X","X","X","X"],["â€¢","â€¢","â€¢","â€¢"],["X","X","X","X"],[1,"X","X","X"],["â€¢","â€¢","â€¢","â€¢"],[1,"X","X","X"],["X",1,"X","X"],["â€¢","â€¢","â€¢","â€¢"],["X",1,"X","X"],["H","H","H","H"],["X","X","X","X"],["â€¢","â€¢","â€¢","â€¢"],["X","X","X","X"],["H","H","H","H"],["X","X","X","X"],["â€¢","â€¢","â€¢","â€¢"],["X","X","X","X"],[1,"X","X","X"],["â€¢","â€¢","â€¢","â€¢"],[1,"X","X","X"],["X",1,"X","X"],["â€¢","â€¢","â€¢","â€¢"],["X",1,"X","X"],["H","H","H","H"],["X","X","X","X"],["â€¢","â€¢","â€¢","â€¢"],["X","X","X","X"],["H","H","H","H"],["X","X","X","X"],["â€¢","â€¢","â€¢","â€¢"],["X","X","X","X"],[1,"X","X","X"],["â€¢","â€¢","â€¢","â€¢"],[1,"X","X","X"],["X",1,"X","X"],["â€¢","â€¢","â€¢","â€¢"],["X",1,"X","X"],["H","H","H","H"],["X","X","X","X"],["â€¢","â€¢","â€¢","â€¢"],["X","X","X","X"],["H","H","H","H"],["X","X","X","X"],["â€¢","â€¢","â€¢","â€¢"],["X","X","X","X"],[1,"X","X","X"],["â€¢","â€¢","â€¢","â€¢"],[1,"X","X","X"],["X",1,"X","X"],["â€¢","â€¢","â€¢","â€¢"],["X",1,"X","X"],["H","H","H","H"],["X","X","X","X"],["â€¢","â€¢","â€¢","â€¢"],["X","X","X","X"],["H","H","H","H"]],"init":false}'

qft_to_distinguish_3_states:
  name: QFT to distinguish 3 states
  json: '{"cols":[["{prepare"],["|0>","|0>","|0>","|0>"],["H","H","H","H"],["P(Ï€)",1,1,1],["}"],["{QFT"],[1,1,1,"H"],[1,1,"P(-Ï€_2)","P(-Ï€_2)"],[1,"P(-Ï€_4)",1,"P(-Ï€_4)"],["P(-Ï€_8)",1,1,"P(-Ï€_8)"],[1,1,"H",1],[1,"P(-Ï€_2)","P(-Ï€_2)",1],["P(-Ï€_4)",1,"P(-Ï€_4)",1],[1,"H",1,1],["P(-Ï€_2)","P(-Ï€_2)",1,1],["H",1,1,1],["Swap",1,1,"Swap"],[1,"Swap","Swap",1],["}"]],"init":false}'

qft_of_simple_qpu_signal:
  name: QFT of simple QPU signal
  json: '{"cols":[["{prepare"],["|0>","|0>","|0>","|0>"],["H","H","H","H"],["P(Ï€_4)",1,1,1],[1,"P(Ï€_2)",1,1],[1,1,"P(Ï€)",1],["}"],["{QFT"],[1,1,1,"H"],[1,1,"P(-Ï€_2)","P(-Ï€_2)"],[1,"P(-Ï€_4)",1,"P(-Ï€_4)"],["P(-Ï€_8)",1,1,"P(-Ï€_8)"],[1,1,"H",1],[1,"P(-Ï€_2)","P(-Ï€_2)",1],["P(-Ï€_4)",1,"P(-Ï€_4)",1],[1,"H",1,1],["P(-Ï€_2)","P(-Ï€_2)",1,1],["H",1,1,1],["Swap",1,1,"Swap"],[1,"Swap","Swap",1],["}"]],"init":false}'

qft_square_wave:
  name: QFT square wave
  json: '{"cols":[["{prepare"],["|0>","|0>","|0>","|0>"],["H","H","H","H"],[1,"P(Ï€)",1,1],["}"],["{QFT"],[1,1,1,"H"],[1,1,"P(-Ï€_2)","P(-Ï€_2)"],[1,"P(-Ï€_4)",1,"P(-Ï€_4)"],["P(-Ï€_8)",1,1,"P(-Ï€_8)"],[1,1,"H",1],[1,"P(-Ï€_2)","P(-Ï€_2)",1],["P(-Ï€_4)",1,"P(-Ï€_4)",1],[1,"H",1,1],["P(-Ï€_2)","P(-Ï€_2)",1,1],["H",1,1,1],["Swap",1,1,"Swap"],[1,"Swap","Swap",1],["}"]],"init":false}'

qft_big_square_wave:
  name: QFT big square wave
  json: '{"cols":[["{prepare"],["|0>","|0>","|0>","|0>","|0>","|0>","|0>","|0>"],["H","H","H","H","H","H","H","H"],[1,1,1,1,"P(Ï€)",1,1,1],["}"],["{QFT"],[1,1,1,1,1,1,1,"H"],[1,1,1,1,1,1,"P(-Ï€_2)","P(-Ï€_2)"],[1,1,1,1,1,"P(-Ï€_4)",1,"P(-Ï€_4)"],[1,1,1,1,"P(-Ï€_8)",1,1,"P(-Ï€_8)"],[1,1,1,"P(-Ï€_16)",1,1,1,"P(-Ï€_16)"],[1,1,"P(-Ï€_32)",1,1,1,1,"P(-Ï€_32)"],[1,"P(-Ï€_64)",1,1,1,1,1,"P(-Ï€_64)"],["P(-Ï€_128)",1,1,1,1,1,1,"P(-Ï€_128)"],[1,1,1,1,1,1,"H",1],[1,1,1,1,1,"P(-Ï€_2)","P(-Ï€_2)",1],[1,1,1,1,"P(-Ï€_4)",1,"P(-Ï€_4)",1],[1,1,1,"P(-Ï€_8)",1,1,"P(-Ï€_8)",1],[1,1,"P(-Ï€_16)",1,1,1,"P(-Ï€_16)",1],[1,"P(-Ï€_32)",1,1,1,1,"P(-Ï€_32)",1],["P(-Ï€_64)",1,1,1,1,1,"P(-Ï€_64)",1],[1,1,1,1,1,"H",1,1],[1,1,1,1,"P(-Ï€_2)","P(-Ï€_2)",1,1],[1,1,1,"P(-Ï€_4)",1,"P(-Ï€_4)",1,1],[1,1,"P(-Ï€_8)",1,1,"P(-Ï€_8)",1,1],[1,"P(-Ï€_16)",1,1,1,"P(-Ï€_16)",1,1],["P(-Ï€_32)",1,1,1,1,"P(-Ï€_32)",1,1],[1,1,1,1,"H",1,1,1],[1,1,1,"P(-Ï€_2)","P(-Ï€_2)",1,1,1],[1,1,"P(-Ï€_4)",1,"P(-Ï€_4)",1,1,1],[1,"P(-Ï€_8)",1,1,"P(-Ï€_8)",1,1,1],["P(-Ï€_16)",1,1,1,"P(-Ï€_16)",1,1,1],[1,1,1,"H",1,1,1,1],[1,1,"P(-Ï€_2)","P(-Ï€_2)",1,1,1,1],[1,"P(-Ï€_4)",1,"P(-Ï€_4)",1,1,1,1],["P(-Ï€_8)",1,1,"P(-Ï€_8)",1,1,1,1],[1,1,"H",1,1,1,1,1],[1,"P(-Ï€_2)","P(-Ï€_2)",1,1,1,1,1],["P(-Ï€_4)",1,"P(-Ï€_4)",1,1,1,1,1],[1,"H",1,1,1,1,1,1],["P(-Ï€_2)","P(-Ï€_2)",1,1,1,1,1,1],["H",1,1,1,1,1,1,1],["Swap",1,1,1,1,1,1,"Swap"],[1,"Swap",1,1,1,1,"Swap",1],[1,1,"Swap",1,1,"Swap",1,1],[1,1,1,"Swap","Swap",1,1,1],["}"]],"init":false}'

qft_frequency_to_state:
  name: QFT Frequency to state
  json: '{"cols":[["{write freq"],["|1>","|1>","|0>","|0>"],["}"],["{invQFT"],["Swap",1,1,"Swap"],[1,"Swap","Swap",1],["H",1,1,1],["P(Ï€_2)","P(Ï€_2)",1,1],["P(Ï€_4)",1,"P(Ï€_4)",1],["P(Ï€_8)",1,1,"P(Ï€_8)"],[1,"H",1,1],[1,"P(Ï€_2)","P(Ï€_2)",1],[1,"P(Ï€_4)",1,"P(Ï€_4)"],[1,1,"H",1],[1,1,"P(Ï€_2)","P(Ï€_2)"],[1,1,1,"H"],["}"]],"init":false}'

qft_prepare_a_state:
  name: QFT Prepare a state
  json: '{"cols":[["{write freq"],["|0>","|0>","|0>","|0>"],["H",1,1,1],["â€¢","X","X","X"],[1,"X",1,1],["X","â€¢",1,1],[1,"X",1,1],["}"],["{invQFT"],["Swap",1,1,"Swap"],[1,"Swap","Swap",1],["H",1,1,1],["P(Ï€_2)","P(Ï€_2)",1,1],["P(Ï€_4)",1,"P(Ï€_4)",1],["P(Ï€_8)",1,1,"P(Ï€_8)"],[1,"H",1,1],[1,"P(Ï€_2)","P(Ï€_2)",1],[1,"P(Ï€_4)",1,"P(Ï€_4)"],[1,1,"H",1],[1,1,"P(Ï€_2)","P(Ï€_2)"],[1,1,1,"H"],["}"]],"init":false}'

qft_frequency_manipulation:
  name: QFT frequency manipulation
  json: '{"cols":[["{prep sinusoidal input signal"],["|0>","|1>","|0>","|0>"],["Swap",1,1,"Swap"],[1,"Swap","Swap",1],["H",1,1,1],["P(Ï€_2)","P(Ï€_2)",1,1],["P(Ï€_4)",1,"P(Ï€_4)",1],["P(Ï€_8)",1,1,"P(Ï€_8)"],[1,"H",1,1],[1,"P(Ï€_2)","P(Ï€_2)",1],[1,"P(Ï€_4)",1,"P(Ï€_4)"],[1,1,"H",1],[1,1,"P(Ï€_2)","P(Ï€_2)"],[1,1,1,"H"],["}"],["{QFT"],[1,1,1,"H"],[1,1,"P(-Ï€_2)","P(-Ï€_2)"],[1,1,"H",1],[1,"P(-Ï€_4)",1,"P(-Ï€_4)"],[1,"P(-Ï€_2)","P(-Ï€_2)",1],[1,"H",1,1],["P(-Ï€_8)",1,1,"P(-Ï€_8)"],["P(-Ï€_4)",1,"P(-Ï€_4)",1],["P(-Ï€_2)","P(-Ï€_2)",1,1],["H",1,1,1],[1,"Swap","Swap",1],["Swap",1,1,"Swap"],["}"],["{add one"],["â€¢","â€¢","â€¢","X"],["â€¢","â€¢","X",1],["â€¢","X",1,1],["X",1,1,1],["}"],["{invQFT"],["Swap",1,1,"Swap"],[1,"Swap","Swap",1],["H",1,1,1],["P(Ï€_2)","P(Ï€_2)",1,1],["P(Ï€_4)",1,"P(Ï€_4)",1],["P(Ï€_8)",1,1,"P(Ï€_8)"],[1,"H",1,1],[1,"P(Ï€_2)","P(Ï€_2)",1],[1,"P(Ï€_4)",1,"P(Ï€_4)"],[1,1,"H",1],[1,1,"P(Ï€_2)","P(Ï€_2)"],[1,1,1,"H"],["}"]],"init":false}'

qft_rotating_phases:
  name: QFT rotating phases
  json: '{"cols":[["|0>","|0>","|0>","|0>"],["H","H","H","H"],["P(Ï€_9)",1,1,1],[1,"P(Ï€_9)",1,1],[1,"P(Ï€_9)",1,1],[1,1,"P(Ï€_9)",1],[1,1,"P(Ï€_9)",1],[1,1,"P(Ï€_9)",1],[1,1,"P(Ï€_9)",1],[1,1,1,"P(Ï€_9)"],[1,1,1,"P(Ï€_9)"],[1,1,1,"P(Ï€_9)"],[1,1,1,"P(Ï€_9)"],[1,1,1,"P(Ï€_9)"],[1,1,1,"P(Ï€_9)"],[1,1,1,"P(Ï€_9)"],[1,1,1,"P(Ï€_9)"]],"init":false}'

qft_without_the_bit_reversal_step:
  name: QFT without the bit reversal step
  json: '{"cols":[["|0>","|0>","|0>","|0>","|0>","|0>","|0>","|0>","|0>","|0>"],["H",1,1,1,1,1,1,1,1,1],["P(Ï€_2)","â€¢",1,1,1,1,1,1,1,1],[1,"H",1,1,1,1,1,1,1,1],["P(Ï€_4)","P(Ï€_2)","â€¢",1,1,1,1,1,1,1],[1,1,"H",1,1,1,1,1,1,1],["P(Ï€_8)","P(Ï€_4)","P(Ï€_2)","â€¢",1,1,1,1,1,1],[1,1,1,"H",1,1,1,1,1,1],["P(Ï€_16)","P(Ï€_8)","P(Ï€_4)","P(Ï€_2)","â€¢",1,1,1,1,1],[1,1,1,1,"H",1,1,1,1,1],["P(Ï€_32)","P(Ï€_16)","P(Ï€_8)","P(Ï€_4)","P(Ï€_2)","â€¢",1,1,1,1],[1,1,1,1,1,"H",1,1,1,1],["P(Ï€_64)","P(Ï€_32)","P(Ï€_16)","P(Ï€_8)","P(Ï€_4)","P(Ï€_2)","â€¢",1,1,1],[1,1,1,1,1,1,"H",1,1,1],["P(Ï€_128)","P(Ï€_64)","P(Ï€_32)","P(Ï€_16)","P(Ï€_8)","P(Ï€_4)","P(Ï€_2)","â€¢",1,1],[1,1,1,1,1,1,1,"H",1,1],["P(Ï€_256)","P(Ï€_128)","P(Ï€_64)","P(Ï€_32)","P(Ï€_16)","P(Ï€_8)","P(Ï€_4)","P(Ï€_2)","â€¢",1],[1,1,1,1,1,1,1,1,"H",1],["P(Ï€_512)","P(Ï€_256)","P(Ï€_128)","P(Ï€_64)","P(Ï€_32)","P(Ï€_16)","P(Ï€_8)","P(Ï€_4)","P(Ï€_2)","â€¢"],[1,1,1,1,1,1,1,1,1,"H"]],"init":false}'
